{
  "hash": "6205f6e96c6c59f4234955608e2ac870",
  "result": {
    "markdown": "---\ntitle: \"From Hugo to Quarto: A Migration Journey\"\nauthor: \"Gustavo Togeiro de Alckmin\"\ndate: \"2025-06-05\"\ncategories: [\"Web Development\", \"Quarto\", \"Hugo\"]\ntags: [\"migration\", \"static site\", \"academic website\"]\ndescription: \"My experience migrating from Hugo/Toha theme to Quarto for a more integrated research workflow\"\n---\n\n\n# Why I Migrated My Website from Hugo to Quarto\n\nAfter maintaining my academic website using Hugo with the Toha theme, I recently made the decision to migrate to Quarto. This post documents my journey, the reasons behind the switch, and lessons learned during the migration process.\n\n## My Previous Setup: Hugo + Toha\n\nMy original website was built using:\n\n- **Hugo**: Fast static site generator\n- **Toha Theme**: Beautiful academic portfolio theme\n- **YAML data files**: Structured content management\n- **GitHub Pages**: Free hosting and deployment\n\nThe Hugo setup served me well for several years, providing a professional-looking academic portfolio with sections for about, experience, projects, and blog posts.\n\n## Why Migrate to Quarto?\n\nSeveral factors influenced my decision to migrate:\n\n### 1. Research Integration\n\nAs a researcher working primarily with R, Quarto offers seamless integration:\n\n\n::: {.cell hash='index_cache/html/example-integration_48e6bdaa57d1af00b69777489a5a4a7c'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Example: Embedding live data analysis in website content\ndata <- data.frame(\n  technology = c(\"Hugo\", \"Quarto\", \"Traditional CMS\"),\n  research_integration = c(2, 10, 1),\n  ease_of_use = c(6, 9, 8)\n)\n\nggplot(data, aes(x = research_integration, y = ease_of_use, \n                 color = technology, size = 3)) +\n  geom_point() +\n  labs(\n    title = \"Technology Comparison for Academic Websites\",\n    x = \"Research Integration (1-10)\",\n    y = \"Ease of Use (1-10)\"\n  ) +\n  theme_minimal() +\n  guides(size = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/example-integration-1.png){width=672}\n:::\n:::\n\n\n### 2. Unified Workflow\n\nWith Quarto, I can now:\n\n- Write blog posts with embedded R code and live results\n- Create presentations from the same content\n- Generate PDFs for academic papers\n- Maintain consistent styling across all outputs\n\n### 3. Modern Development Experience\n\nQuarto provides:\n\n- Better developer tools and VS Code integration\n- Live preview during development\n- More flexible theming options\n- Built-in Bootstrap integration\n\n## Migration Challenges\n\n### Content Conversion\n\nThe biggest challenge was converting Hugo's YAML-based content structure to Quarto's markdown files:\n\n```yaml\n# Hugo structure (data/en/sections/about.yaml)\nsection:\n  name: About\n  designation: \"Postdoc Researcher\"\n  company:\n    name: \"University of Missouri\"\n  summary: 'Research summary...'\n  socialLinks:\n    - name: Github\n      icon: \"fab fa-github\"\n      url: \"https://github.com/username\"\n```\n\nTo Quarto's integrated markdown:\n\n```markdown\n---\ntitle: \"About\"\n---\n\n## Background\nResearch summary integrated directly in markdown...\n\n[{{< fa brands github >}} GitHub](https://github.com/username)\n```\n\n### Asset Migration\n\nMoving images and static files required:\n\n1. **Reorganizing directory structure**\n2. **Updating image references**\n3. **Converting icon systems** (Font Awesome integration)\n4. **Adapting responsive layouts**\n\n### Styling Adaptation\n\nTransitioning from Toha's custom CSS to Bootstrap-based styling:\n\n- Maintained visual consistency\n- Adapted color schemes and typography\n- Ensured mobile responsiveness\n- Added custom SCSS for specific needs\n\n## Migration Process\n\n### Step 1: Project Setup\n\n```bash\n# Create new Quarto project\nmkdir alckmin-quarto-site\ncd alckmin-quarto-site\nquarto create-project . --type website\n```\n\n### Step 2: Content Migration\n\nI created a systematic approach:\n\n1. **Extracted content** from YAML files\n2. **Converted to Quarto markdown** format\n3. **Reorganized directory structure**\n4. **Updated internal links and references**\n\n### Step 3: Design Implementation\n\n- **Bootstrap theme** selection and customization\n- **SCSS variables** for consistent branding\n- **Component styling** for cards, timelines, etc.\n- **Responsive design** optimization\n\n### Step 4: Deployment Setup\n\n```yaml\n# GitHub Actions workflow for automatic deployment\nname: Render and Publish\non:\n  push:\n    branches: [main]\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: quarto-dev/quarto-actions/setup@v2\n      - uses: quarto-dev/quarto-actions/render@v2\n      - uses: actions/upload-pages-artifact@v2\n        with:\n          path: docs\n      - uses: actions/deploy-pages@v2\n```\n\n## Results and Benefits\n\n### Improved Research Workflow\n\nNow I can:\n\n- Include live R analysis in blog posts\n- Embed interactive visualizations\n- Maintain reproducible content\n- Version control everything in one place\n\n### Better Content Management\n\n- **Single-source publishing**: Same content for web, PDF, presentations\n- **Live code execution**: Results update automatically\n- **Better collaboration**: Markdown-based content is easier to edit\n- **Version control**: Git-friendly plain text format\n\n### Enhanced Functionality\n\nThe new site includes:\n\n- **Interactive code blocks** with copy functionality\n- **Mathematical expressions** with KaTeX\n- **Responsive design** that works on all devices\n- **Fast loading** with optimized assets\n\n## Lessons Learned\n\n### Planning is Essential\n\n- **Content audit** before migration saved time\n- **Asset inventory** helped track all files\n- **URL mapping** maintained SEO value\n- **Backup strategy** provided peace of mind\n\n### Gradual Migration Works Best\n\nInstead of a big-bang approach:\n\n1. **Set up parallel development**\n2. **Migrate content section by section**\n3. **Test thoroughly** at each stage\n4. **Maintain old site** until confident\n\n### Community Resources Are Valuable\n\n- **Quarto documentation** is excellent\n- **Community examples** provided inspiration\n- **GitHub discussions** helped solve specific issues\n- **Bootstrap themes** offered design starting points\n\n## Future Enhancements\n\nWith the Quarto foundation in place, I'm planning:\n\n- **Enhanced data visualizations** with Observable JS\n- **Interactive tutorials** using Quarto's computational features\n- **Automated content updates** from research databases\n- **Multi-format publishing** for presentations and papers\n\n## Recommendations\n\nFor other academics considering a similar migration:\n\n### When to Migrate\n\nConsider Quarto if you:\n\n- Work primarily with R, Python, or Julia\n- Want integrated computational content\n- Value reproducible research workflows\n- Need multiple output formats\n\n### Migration Tips\n\n1. **Start small** with a new section or blog\n2. **Use migration tools** where available\n3. **Test thoroughly** across devices and browsers\n4. **Document your process** for future reference\n5. **Backup everything** before starting\n\n## Conclusion\n\nMigrating from Hugo to Quarto has significantly improved my research workflow and website management experience. While the migration required substantial effort, the benefits of having an integrated platform for research, analysis, and communication make it worthwhile.\n\nThe ability to embed live code, create reproducible content, and maintain everything in a unified workflow has already enhanced both my research productivity and my ability to share findings with the community.\n\nFor researchers seeking a modern, integrated approach to academic websites, Quarto represents a compelling choice that bridges the gap between research tools and web publishing.\n\n---\n\n*Interested in learning more about my migration process or Quarto for academic websites? Feel free to [reach out](mailto:gustavo.togeirodealckmin@missouri.edu) with questions!*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}